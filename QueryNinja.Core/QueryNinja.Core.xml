<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QueryNinja.Core</name>
    </assembly>
    <members>
        <member name="T:QueryNinja.Core.DynamicQuery">
            <summary>
            Represent default query class with filters, ordering rules and selectors. <br/>
            </summary>
        </member>
        <member name="M:QueryNinja.Core.DynamicQuery.#ctor(System.Collections.Generic.IReadOnlyList{QueryNinja.Core.IQueryComponent},System.Collections.Generic.IReadOnlyList{QueryNinja.Core.Projection.ISelector})">
            <inheritdoc />
        </member>
        <member name="M:QueryNinja.Core.DynamicQuery.GetSelectors">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Exceptions.QueryNinjaException">
            <summary>
            Base exception for all QueryNinja exceptions.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Exceptions.QueryNinjaException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:QueryNinja.Core.Exceptions.QueryNinjaException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Extensibility.AbstractComponentExtension`1">
            <inheritdoc/>
        </member>
        <member name="P:QueryNinja.Core.Extensibility.AbstractComponentExtension`1.QueryComponent">
            <inheritdoc/>
        </member>
        <member name="T:QueryNinja.Core.Extensibility.IExtensionsSettings">
            <summary>
            Interface that allow to configure <see cref="T:QueryNinja.Core.Extensibility.QueryNinjaExtensions"/>
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Extensibility.IExtensionsSettings.ForType``1">
            <summary>
            Allows configuration for specific <see cref="T:QueryNinja.Core.Extensibility.IQueryComponentExtension"/> descendant.
            </summary>
            <typeparam name="TExtension">Extension to configure.</typeparam>
            <returns>Settings related to specific Extension.</returns>
        </member>
        <member name="M:QueryNinja.Core.Extensibility.IExtensionsSettings.RegisterComponent(System.Type)">
            <summary>
            Registers existence of a specific query component type. <br/>
            Later on, Sources or Targets <b>may</b> use this information.
            </summary>
            <param name="componentType">Type that implements <see cref="T:QueryNinja.Core.IQueryComponent"/></param>
        </member>
        <member name="M:QueryNinja.Core.Extensibility.IExtensionsSettings.RegisterComponent``1">
            <summary>
            Registers existence of a specific query component type. <br/>
            Later on, Sources or Targets <b>may</b> use this information.
            </summary>
            <typeparam name="TComponent">Type that implements <see cref="T:QueryNinja.Core.IQueryComponent"/></typeparam>
        </member>
        <member name="T:QueryNinja.Core.Extensibility.IQueryComponentExtension">
            <summary>
            Interface that used to use <see cref="T:QueryNinja.Core.IQueryComponent"/> in Target or Source package <br/>
            Do not use this interface directly. For developing own query components use interfaces defined in Target or Source package.
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Extensibility.IQueryComponentExtension.QueryComponent">
            <summary>
            Type of the component this extension is related to.
            </summary>
        </member>
        <member name="T:QueryNinja.Core.Extensibility.QueryNinjaExtensions">
            <summary>
            Contains all descriptors related to all plugins.
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Extensibility.QueryNinjaExtensions.KnownQueryComponents">
            <summary>
            Allows to get all known Types of <see cref="T:QueryNinja.Core.IQueryComponent"/>. <br/>
            Intended only for extensibility purposes.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.Extensions``1">
            <summary>
            Allows to get all extensions of Desired type. <br/>
            Should mainly be used by Targets or Sources to access required extensions.
            </summary>
            <typeparam name="TExtension">In most cases, interface or abstract class that registered extensions may derive from or implement.</typeparam>
            <returns></returns>
        </member>
        <member name="P:QueryNinja.Core.Extensibility.QueryNinjaExtensions.Configure">
            <summary>
            Allows to modify Extensions List and develop extension methods to do it in a simple way. <br/>
            <b>It is not possible to register two instances of the extension with the same Type. This type of actions will be ignored.</b>
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionTypeSettings`1.ForType``1">
            <inheritdoc />
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionTypeSettings`1.RegisterComponent(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionTypeSettings`1.RegisterComponent``1">
            <inheritdoc />
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionTypeSettings`1.Register``1">
            <inheritdoc />
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionTypeSettings`1.Register(`0)">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionsSettings">
            <inheritdoc/>
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionsSettings.RegisterComponent(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:QueryNinja.Core.Extensibility.QueryNinjaExtensions.ExtensionsSettings.RegisterComponent``1">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Extensibility.IExtensionTypeSettings`1">
            <summary>
            Settings related to specific <see cref="T:QueryNinja.Core.Extensibility.IQueryComponentExtension"/> type. <br/>
            Used to configure collections of Extensions with same parent.
            </summary>
            <typeparam name="TExtension"></typeparam>
        </member>
        <member name="T:QueryNinja.Core.Filters.AbstractDefaultFilter`1">
            <summary>
            Applies filter defined by the <see cref="P:QueryNinja.Core.Filters.AbstractDefaultFilter`1.Operation"/>
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Filters.AbstractDefaultFilter`1.#ctor(`0,System.String,System.String)">
            <summary>
            Default constructor for Filter instance creation.
            </summary>
            <param name="operation"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="P:QueryNinja.Core.Filters.AbstractDefaultFilter`1.Operation">
            <inheritdoc/>
        </member>
        <member name="P:QueryNinja.Core.Filters.AbstractDefaultFilter`1.Property">
            <inheritdoc/>
        </member>
        <member name="P:QueryNinja.Core.Filters.AbstractDefaultFilter`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:QueryNinja.Core.Filters.AbstractDefaultFilter`1.ToString">
            <summary>
            Debug-friendly implementation. Return string representation of filter operation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QueryNinja.Core.Filters.CollectionFilter">
            <summary>
            Filter with collection-related operations. Operations are defined in <see cref="T:QueryNinja.Core.Filters.CollectionOperation"/>
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Filters.CollectionFilter.#ctor(QueryNinja.Core.Filters.CollectionOperation,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Filters.CollectionOperation">
            <summary>
            Represent operations applicable on the collection property.
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.CollectionOperation.Contains">
            <summary>
            Checks that collection contains desired value
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.CollectionOperation.IsEmpty">
            <summary>
            Allows to check collection emptiness.
            </summary>
        </member>
        <member name="T:QueryNinja.Core.Filters.ComparisonFilter">
            <summary>
            Filter that works with primitive types and comparison operations. <br/>
            List of supported operations could be fined here: <see cref="T:QueryNinja.Core.Filters.ComparisonOperation"/>.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Filters.ComparisonFilter.#ctor(QueryNinja.Core.Filters.ComparisonOperation,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Filters.ComparisonOperation">
            <summary>
            Represent desired filter operation for the <see cref="T:QueryNinja.Core.Filters.ComparisonFilter"/>
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.ComparisonOperation.Equals">
            <summary>
            Applicable to primitive types. <br/>
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.ComparisonOperation.NotEquals">
            <summary>
            Applicable to primitive types. <br/>
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.ComparisonOperation.Greater">
            <summary>
            Applicable to primitive types. <br/>
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.ComparisonOperation.GreaterOrEquals">
            <summary>
            Applicable to primitive types. <br/>
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.ComparisonOperation.Less">
            <summary>
            Applicable to primitive types. <br/>
            </summary>
        </member>
        <member name="F:QueryNinja.Core.Filters.ComparisonOperation.LessOrEquals">
            <summary>
            Applicable to primitive types. <br/>
            </summary>
        </member>
        <member name="T:QueryNinja.Core.Filters.IDefaultFilter`1">
            <summary>
            Represent a rule to filter Target collection with selected <see cref="P:QueryNinja.Core.Filters.IDefaultFilter`1.Operation"/>.
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Filters.IDefaultFilter`1.Operation">
            <summary>
            Enum that will describe all possible operations in this filter.
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Filters.IDefaultFilter`1.Property">
            <summary>
            Target property name
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Filters.IDefaultFilter`1.Value">
            <summary>
            Value to use for the <see cref="P:QueryNinja.Core.Filters.IDefaultFilter`1.Operation"/> with property
            </summary>
        </member>
        <member name="T:QueryNinja.Core.Filters.IFilter">
            <summary>
            Represent a rule to filter Target collection.
            </summary>
        </member>
        <member name="T:QueryNinja.Core.IDynamicQuery">
            <summary>
            This is core interface for queries that allows to select desired properties from original result aka projection.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.IDynamicQuery.GetSelectors">
            <summary>
            Returns a collection that defines how to construct result projection
            </summary>
            <returns></returns>
        </member>
        <member name="T:QueryNinja.Core.IQuery">
            <summary>
              This is core interface for all types of queries
            </summary>
        </member>
        <member name="M:QueryNinja.Core.IQuery.GetComponents">
            <summary>
              Returns a single collections with all query components.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QueryNinja.Core.IQueryComponent">
            <summary>
            Represent a generic query component such as <see cref="T:QueryNinja.Core.Filters.IFilter"/> or <see cref="T:QueryNinja.Core.OrderingRules.OrderingRule"/>
            </summary>
        </member>
        <member name="T:QueryNinja.Core.OrderingRules.OrderDirection">
            <summary>
            Represent desired order direction for the <see cref="T:QueryNinja.Core.OrderingRules.OrderingRule"/>
            </summary>
        </member>
        <member name="F:QueryNinja.Core.OrderingRules.OrderDirection.Ascending">
            <summary>
            Ascending direction of order.
            </summary>
        </member>
        <member name="F:QueryNinja.Core.OrderingRules.OrderDirection.Descending">
            <summary>
            Descending direction of order.
            </summary>
        </member>
        <member name="T:QueryNinja.Core.OrderingRules.OrderingRule">
            <summary>
            Represent a rule to define Target collection order.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.OrderingRules.OrderingRule.#ctor(System.String,QueryNinja.Core.OrderingRules.OrderDirection)">
            <summary>
            Creates ordering rule.
            </summary>
            <param name="property"></param>
            <param name="direction"></param>
        </member>
        <member name="P:QueryNinja.Core.OrderingRules.OrderingRule.Property">
            <summary>
            Target property name
            </summary>
        </member>
        <member name="P:QueryNinja.Core.OrderingRules.OrderingRule.Direction">
            <summary>
            Represent ordering direction for the selected property.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.OrderingRules.OrderingRule.ToString">
            <summary>
            Debug-friendly implementation. Return string representation of <see cref="T:QueryNinja.Core.OrderingRules.OrderingRule"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:QueryNinja.Core.Projection.ISelector">
            <summary>
            Allows to specify how the original properties should be selected into result projection.
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Projection.ISelector.Source">
            <summary>
            Path to the source property.
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Projection.ISelector.Target">
            <summary>
            Path to the target property
            </summary>
        </member>
        <member name="T:QueryNinja.Core.Projection.RenameSelector">
            <summary>
            Represent selector that allows to place selected properties to different path.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Projection.RenameSelector.#ctor(System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:QueryNinja.Core.Projection.RenameSelector"/>
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="P:QueryNinja.Core.Projection.RenameSelector.Source">
            <inheritdoc />
        </member>
        <member name="P:QueryNinja.Core.Projection.RenameSelector.Target">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Projection.Selector">
            <summary>
            Represent selector that leaves path to properties as-is.
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Projection.Selector.#ctor(System.String)">
            <summary>
            Creates instance of Selector.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:QueryNinja.Core.Projection.Selector.Source">
            <inheritdoc />
        </member>
        <member name="P:QueryNinja.Core.Projection.Selector.Target">
            <inheritdoc />
        </member>
        <member name="T:QueryNinja.Core.Query">
            <summary>
            Represent default query class with filters and ordering rules. <br/>
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Query.#ctor(System.Collections.Generic.IReadOnlyList{QueryNinja.Core.IQueryComponent})">
            <summary>
            Creates instance of <see cref="T:QueryNinja.Core.Query"/> with defined query components.
            </summary>
            <param name="components"></param>
        </member>
        <member name="P:QueryNinja.Core.Query.Filters">
            <summary>
            Represent a collection of filters to be applied on Target collection. <br/>
            All filters are join with AND operator.
            </summary>
        </member>
        <member name="P:QueryNinja.Core.Query.OrderingRules">
            <summary>
            Represent a collection of order rules to be applied on Target collection. <br/>
            </summary>
        </member>
        <member name="M:QueryNinja.Core.Query.GetComponents">
            <inheritdoc/>
        </member>
        <member name="M:QueryNinja.Core.Query.ToString">
            <summary>
            Debug-friendly implementation. Represent whole query.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
